buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_gradle_plugin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+"
        classpath 'com.adarshr:gradle-test-logger-plugin:1.6.0'
    }
}

ext {
    libs = [
        // Compile
        kotlin_stdlib_common   : "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version",
        kotlin_stdlib_jvm      : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version",
        kotlin_stdlib_js       : "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version",
        kotlin_reflect         : "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",

        // Tests
        kotlin_test_common     : "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version",
        kotlin_test_jvm        : "org.jetbrains.kotlin:kotlin-test:$kotlin_version",
        kotlin_test_junit      : "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version",
        kotlin_test_js         : "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version",
        kotlin_test_annotations: "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version",
        kotlinx_coroutines_test: "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinx_coroutines_version",

        junit                  : "junit:junit:4.13.2",
    ]
}

allprojects {
    group 'org.amshove.kluent'
    version '1.68'

    apply plugin: 'com.adarshr.test-logger'

    repositories {
        mavenCentral()
    }
}

subprojects {
    ext.configurePublishing = { artifactName = null ->

        apply plugin: 'maven'
        apply plugin: 'java'
        apply plugin: 'signing'

        // Comment when publishing
        tasks.withType(Sign) {
            onlyIf { gradle.taskGraph.hasTask("publish") }
        }

        signing {
            useGpgCmd()
            sign configurations.archives
        }

        artifactName = artifactName ?: project.name

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                        authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
                    }
                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
                    }

                    pom.project {
                        name artifactName
                        packaging 'jar'
                        description 'Fluent Assertion-Library for Kotlin'
                        url 'https://github.com/MarkusAmshove/Kluent'

                        scm {
                            connection 'scm:git:git:github.com/MarkusAmshove/Kluent.git'
                            developerConnection 'scm:git:git:github.com/MarkusAmshove/Kluent.git'
                            url 'https://github.com/MarkusAmshove/Kluent'
                        }

                        licenses {
                            license {
                                name 'MIT'
                                url 'https://github.com/MarkusAmshove/Kluent/blob/master/LICENSE'
                            }
                        }

                        developers {
                            developer {
                                id 'markusamshove'
                                name 'Markus Amshove'
                            }
                        }
                    }
                }
            }
        }

        task printArtifactName {
            doLast {
                logger.info("artifactName: $artifactName")
            }
        }
    }
}
